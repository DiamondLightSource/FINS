Factory Intelligent Network Service (FINS)
==========================================

Interfaces
----------

asynOctet
r	FINS_MODEL		20 character string of module model number
w	FINS_CYCLE_TIME_RESET	Reset PLC cycle time calculations
		
Int32
r	FINS_DM_READ		16 bit Data Memory read
r	FINS_AR_READ		16 bit Auxiliary Memory read
r	FINS_IO_READ		16 bit I/O Area read
r	FINS_DM_READ_32		32 bit Data Memory read
r	FINS_AR_READ_32		32 bit Auxillary Memory read
r	FINS_IO_READ_32		32 bit I/O Area read
r	FINS_CYCLE_TIME_MEAN	PLC mean cycle time (ms)
r	FINS_CYCLE_TIME_MAX	PLC max cycle time (ms)
r	FINS_CYCLE_TIME_MIN	PLC min cycle time (ms)
r	FINS_CPU_STATUS
r	FINS_CPU_MODE		PLC mode (STOP, PROGRAM, MONITOR)
w	FINS_DM_WRITE		16 bit Data Memory write
w	FINS_DM_WRITE_NOREAD	As above without a read
w	FINS_AR_WRITE		16 bit Auxillary Memory write
w	FINS_AR_WRITE_NOREAD	As above without a read
w	FINS_IO_WRITE		16 bit I/O Area write
w	FINS_IO_WRITE_NOREAD	As above without a read
w	FINS_CYCLE_TIME_RESET	Reset PLC cycle time calculations
w	FINS_DM_WRITE_32	32 bit Data Memory write
w	FINS_DM_WRITE_32_NOREAD	As above without a read
w	FINS_AR_WRITE_32	32 bit Auxillary Memory write
w	FINS_AR_WRITE_32_NOREAD	As above without a read
w	FINS_IO_WRITE_32	32 bit I/O Area write
w	FINS_IO_WRITE_32_NOREAD	As above without a read
		
Int16Array
r	FINS_DM_READ		16 bit array Data Memory read
r	FINS_AR_READ		16 bit array Auxillary Memory read
r	FINS_IO_READ		16 bit array I/O Area read
r	FINS_CLOCK_READ		PLC clock/date read (7 * SHORT)
w	FINS_DM_WRITE		16 bit array Data Memory write	
w	FINS_AR_WRITE		16 bit array Auxillary Memory write
w	FINS_IO_WRITE		16 bit array I/O Area write
	
Int32Array
r	FINS_DM_READ_32		32 bit array Data Memory read
r	FINS_AR_READ_32		32 bit array Auxillary Memory read
r	FINS_IO_READ_32		32 bit array I/O Area read
r	FINS_CYCLE_TIME		PLC cycle time read (3 * LONG)
w	FINS_DM_WRITE_32	32 bit array Data Memory write
w	FINS_AR_WRITE_32	32 bit array Auxillary Memory write
w	FINS_IO_WRITE_32	32 bit array I/O Area write
		
Float32Array
r	FINS_DM_READ_32		32 bit float Data Memory read
r	FINS_AR_READ_32		32 bit float Auxillary Memory read
w	FINS_DM_WRITE_32	32 bit float Data Memory write
w	FINS_AR_WRITE_32	32 bit float Auxillary Memory write

Float64
r	FINS_DM_READ_32		64 bit float Data Memory read
r	FINS_AR_READ_32		64 bit float Auxillary Memory read
w	FINS_DM_WRITE_32	64 bit float Data Memory write
w	FINS_AR_WRITE_32	64 bit float Auxillary Memory write

The _NOREAD versions of the WRITE functions do not perform an initial read from the device
during record initialisation. Performing the inital read is asyn's method of bumpless restarts.

FINS via UDP or TCP
-------------------

To send FINS commands over Ethernet:

    finsNETInit(<port name>, <asyn port name>, <node number>)

where

* port name - The name of the asyn port to create.

* asyn port name - The name of the asyn port created in drvAsynIPPortConfigure()

* node number - Only required for UDP connections. Don't specify or set to zero for TCP.
		The node number of the IOC, which should be between 1 and 254.
                Zero will select the default value of 254.
		The node number must not be the same as the PLC's node number (the last byte of its IP address).
		Each IOC communicating with the same PLC must have a unique node number.

* Create an asyn port for the connection: drvAsynIPPortConfigure("<asyn port name>", "xxx.xxx.xxx.xxx:9600 udp", 0, 0, 0)
* Create an asyn port for the connection: drvAsynIPPortConfigure("<asyn port name>", "xxx.xxx.xxx.xxx:9600 tcp", 0, 0, 0)

* Transfers are limited to 500 16-bit words (1000 bytes) maximum.

* The PLC's default FINS UDP/TCP port is 9600.

* The default timeout, the third parameter of the @asyn() command, is one second.

* A funtion finsTest("<ip address>") sends a FINS data memory read request for two words from
  address 100 to the specified IP address.

* Up to 16 simultaneous TCP connections to the PLC are supported.

* The old finsUDPInit function still exists and there's a new finsTCPInit function:

	finsUDPInit(<port name>, <IP address>)
	finsTCPInit(<port name>, <IP address>)

finsHostlink
------------

To send FINS commands in a HOSTLINK wrapper to a local serial device:

    HostlinkInterposeInit(<asyn port name>)
    finsDEVInit(<port name>, <asyn port name>)
    
To send FINS commands in a HOSTLINK wrapper to a terminal server:

    HostlinkInterposeInit(<asyn port name>)
    finsNETInit(<port name>, <asyn port name>, <node number>)


where

* port name - The name of the asyn port to create.

* asyn port name - The name of the asyn port created in drvAsynSerialPortConfigure().

* Transfers are limited to 268 16-bit words maximum.

* The function HostlinkInterposeInit adds an asyn interpose layer to convert the binary FINS data into ASCII HostLink data.


FINS.template illustrates how to configure records.
